---
Contains things related to math and arithmetic.
---

-- Summation
let sum = fn [a : num, b : num] a + b
let ten = sum [3, 7]

-- Factorial using recursion
let factorial = fn [x] if x == 0 then 1 else x * factorial [x - 1]
let ten_factorial = factorial [10]

----------------------------------------------------
The quadratic equation including discriminant checks.
Returns as many solutions as are found, in a tuple.
----------------------------------------------------
let quadratic_equation = fn [
	.a : num
	.b : num
	.c : num
] (
	let discriminant = b^2 - 4 * a * c
	if discriminant < 0 then
		[]
	else if discriminant = 0 then
		[-b / (2 * a)]
	else
		[
			(-b + sqrt [discriminant]) / (2 * a) 
			(-b - sqrt [discriminant]) / (2 * a)
		]
)
let solved = quadratic_equation [
	.a 1
	.b -3.0
	.c 2.0
]

-- Ways of writing numbers
let unary = [+2, -2]
let special_numbers = [nan, inf, -inf, -nan, tau, eul, phi]
let not_numbers = [hello, world, these, are, not, numbers, including, pi, because, im, petty]

let foo = eul ^ (i * tau * time)

-- Division techniques
let division = [2.4 / 1, 2.4 // 1, 2.4 /^ 1 ]