comment ::= Comment;

block ::= OpenParen, block_inner, CloseParen;
block_inner ::= { let_declaration }, expr;

let_declaration ::= Let, capture, Equal, expr;

expr ::= [ Throw ], expr_chain;

expr_chain ::= expr_chain_thin, { ( ThinArrow, expr_chain_thin ) / ( FatArrow, expr_chain_fat ) };
expr_chain_thin ::= expr_bi_op, { bi_op, expr_bi_op };
expr_chain_fat ::= ( ( bi_op, expr_bi_op ) / ( Name, [ value_tuple ] ) ), { bi_op, expr_bi_op };
expr_bi_op ::= { un_op }, expr_un_op;
expr_un_op ::= expr_access, { Dot, Name };
expr_access ::= value;

bi_op ::= Caret / Asterisk / Slash / DoubleSlash / SlashCaret / Percent / Plus / Minus / Equal / BangEqual / Less / More / LessEqual / MoreEqual / And / Or;
un_op ::= Bang / Minus / Plus / Hash;

value ::= value_fn / value_name / value_loop / value_block / value_fn;
value_fn_eval ::= Name, value_tuple;
value_name ::= Name;
value_conditional ::= If, expr, Then, expr, Else, expr;
value_loop ::= Loop, capture, Equal, expr, block;
value_block ::= [ Catch ], block;
value_fn ::= Fn, capture_tuple, expr;
value_string ::= String;
value_tuple ::= OpenBracket, { value_tuple_entry, (Comma / EndLine) }, CloseBracket;
value_tuple_entry ::= [ ( Dot, Name ) / Ellipsis ], expr;

capture ::= ( capture_name / capture_tuple ), [ Colon, capture_type ];
capture_name ::= Name;
capture_tuple ::= OpenBracket, { capture_tuple_entry, (Comma / EndLine) }, CloseBracket;
capture_tuple_entry ::= ( capture_tuple_explicit / capture_tuple_implicit );
capture_tuple_explicit ::= ( ( Dot, Name ) / Ellipsis ), [ capture ];
capture_tuple_implicit ::= capture;
capture_type ::= Name;
