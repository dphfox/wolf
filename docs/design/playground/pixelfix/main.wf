let output_as: [
	bleed: unique
	bleed_opaque: unique
	coverage: unique
	uv: unique
	distance: unique
]

let main: algo fn args (
	let args: args => cli.parse
	do print "Loading image from \(args.input)"

	let img: image.open args.input => expect "Failed to open image" =>
		 image.with_guessed_format => expect "Failed to guess format of image" =>
		 decode => expect "Failed to decode image"

	let size: img => image.size
	do print "Image size is \(size.0) x \(size.1)"

	let var search_radius: size => max => log2 => ceil => exp2 => floor_div 2

	do print "Will use a search radius of \(search_radius)"

	let preserve_above: args.preserve_above => ok_or 0
	do print "Will preserve alpha above \(preserve_above)"

	do print "Will use \(args.edge_mode) edge behaviour"

	let voronoi_1: voronoi.new size
	let voronoi_2: voronoi.new size
	let var [voronoi_read, voronoi_write] = [voronoi_1, voronoi_2]

	do print "Preparing Voronoi graph for filling..."

	for pos in [0, 0] => count_until size (
		let alpha: img => get_pixel pos
		if alpha > preserve_above (
			voronoi_read => at pos => do set_closest some pos
		)
	)

	do print "Filling Voronoi graph..."

	do loop (
		let @jfa
		let results: [0, 0] => count_until size => 
			map fn [x, y] (
				let index: x * size.0 + y
				let closest: [
					voronoi_read => get_closest [mode: args.edge_mode, at: [x, y]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x, y - search_radius]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x, y + search_radius]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x - search_radius, y]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x + search_radius, y]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x - search_radius, y - search_radius]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x - search_radius, y + search_radius]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x + search_radius, y - search_radius]]
					voronoi_read => get_closest [mode: args.edge_mode, at: [x + search_radius, y + search_radius]]
				] => 
				into_stream =>
				filter_map fn position (
					if let <some position>: position (
						let offset: position - [x, y]
						let distance: offset => magnitude
						some [position, distance]
					) else (none)
				) => 
				reduce fn [best, candidate] (
					if candidate.1 < best.1 (candidate) else (best)
				)

				if let <some closest>: closest (
					some [at: [x, y], value: some closest.0]
				) else (none)
			)
		
		for result in results (
			voronoi_write => set_closest result
		)

		do [voronoi_read, voronoi_write] = [voronoi_write, voronoi_read]

		if search_radius <= 1 (
			do break @jfa
		) else (
			do search_radius /= 2
		)
	)

	match args.output_as (
		if let <output_as.bleed> (
			do print "Bleeding pixels and preserving alpha..."
			for pos in [0, 0] => count_until size (
				if let <some closest_pos>: voronoi_read => get_closest [mode: args.edge_mode, at: pos] (
					let rgba = [
						image => get_pixel closest_pos -> _.[0, 1, 2]...
						image => get_pixel image_pos -> _.3
					]
					image => put_pixel [at: pos, put: rgba]
				) else (
					image => put_pixel [at: pos, put: [0, 0, 0, 0]]
				)
			)
		)
		if let <output_as.bleed_opaque> (
			do print "Bleeding pixels and discarding alpha..."
			for pos in [0, 0] => count_until size (
				if let <some closest_pos>: voronoi_read => get_closest [mode: args.edge_mode, at: pos] (
					let rgba = [
						image => get_pixel closest_pos -> _.[0, 1, 2]...
						255
					]
					image => put_pixel [at: pos, put: rgba]
				) else (
					image => put_pixel [at: pos, put: [0, 0, 0, 0]]
				)
			)
		)
		if let <output_as.uv> (
			do print "Plotting closest UVs..."
			for pos in [0, 0] => count_until size (
				if let <some closest_pos>: voronoi_read => get_closest [mode: args.edge_mode, at: pos] (
					let rgba = [
						closest_pos * 255 / size -> _...
						0, 255
					]
					image => put_pixel [at: pos, put: rgba]
				) else (
					image => put_pixel [at: pos, put: [0, 0, 0, 0]]
				)
			)
		)
		if let <output_as.coverage> (
			do print "Plotting Voronoi coverage..."
			for pos in [0, 0] => count_until size (
				if let <some closest_pos>: voronoi_read => get_closest [mode: args.edge_mode, at: pos] (
					image => put_pixel [at: pos, put: [255, 255, 255, 255]]
				) else (
					image => put_pixel [at: pos, put: [0, 0, 0, 255]]
				)
			)
		)
		if let <output_as.distance> (
			do print "Plotting distance field..."
			for pos in [0, 0] => count_until size (
				if let <some closest_pos>: voronoi_read => get_closest [mode: args.edge_mode, at: pos] (
					let distance: image_pos - closest_pos => magnitude
					let value: 255 - distance => clamp [0, 255] => round
					image => put_pixel [at: pos, put: [value, value, value, 255]]
				) else (
					image => put_pixel [at: pos, put: [0, 0, 0, 255]]
				)
			)
		)
	)
	

	let output: args.output => ok_or args.input
	do print "Saving image to \(output)"
	img => do save output => expect "Failed to save image"
	do print "Completed!"
)