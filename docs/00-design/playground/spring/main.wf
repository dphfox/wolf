let spring_coefficients := fn [
	.at time / num
	.speed / num
	.damping / num
] if time == 0 or speed == 0: (
	[
		.pos_pos 1
		.pos_vel 0
		.vel_pos 0
		.vel_vel 1	
	]
) if damping > 1: (
	-- overdamped spring

	let alpha := sqrt (damping^2 - 1)
	let neg_half_over_alpha_speed := -0.5 / (alpha * speed)
	let z1 := speed * (alpha + damping) * -1
	let z2 := speed * (alpha - damping)
	let exp1 := exp (time * z1)
	let exp2 := exp (time * z2)

	[
		.pos_pos (exp2 * z1 - exp1 * z2) * neg_half_over_alpha_speed
		.pos_vel (exp1 - exp2) * neg_half_over_alpha_speed / speed
		.vel_pos (exp2 - exp1) * neg_half_over_alpha_speed * speed
		.vel_vel (exp1 * z1 - exp2 * z2) * neg_half_over_alpha_speed
	]
) if damping == 1: (
	-- critically damped spring

	let time_speed := time * speed
	let time_speed_neg1 := time_speed * -1
	let exp := exp time_speed_neg1

	[
		.pos_pos exp * (time_speed + 1)
		.pos_vel exp * time
		.vel_pos exp * (time_speed_neg1 * speed)
		.vel_vel exp * (time_speed_neg1 + 1)
	]
) else: (
	-- underdamped spring

	let alpha := speed * sqrt (1 - damping^2)
	let over_alpha := 1 / alpha
	let exp := exp (-1 * time * speed * damping)
)